for (var _gaq = _gaq || {}, tokens = {}, i = 0; i < my.gadgets.length; i++) tokens[my.gadgets[i].url] = {}, tokens[my.gadgets[i].url][osapi.container.TokenResponse.TOKEN] = my.gadgets[i].secureToken; var orngConfig = {}; orngConfig[osapi.container.ServiceConfig.API_PATH] = "/shindigucsf/rpc"; orngConfig[osapi.container.ContainerConfig.RENDER_DEBUG] = my.debug; orngConfig[osapi.container.ContainerConfig.TOKEN_REFRESH_INTERVAL] = 0; orngConfig[osapi.container.ContainerConfig.PRELOAD_TOKENS] = tokens; var OrngContainer = new osapi.container.Container(orngConfig);
my.init = function () { OrngContainer.init(); my.gadgetsByURL = {}; for (var b = [], a = 0; a < my.gadgets.length; a++) b[a] = my.gadgets[a].url, my.gadgetsByURL[my.gadgets[a].url] = my.gadgets[a]; OrngContainer.preloadGadgets(b, function (a) { for (var b in a) a[b].error || window.buildGadget(a, my.gadgetsByURL[b]) }); "function" != typeof _gaq.push && (_gaq.push = function (a) { }) };
OrngContainer.init = function () {
    OrngContainer.managedHub = new OpenAjax.hub.ManagedHub({ onSubscribe: function (a, b) { setTimeout("OrngContainer.callORNGResponder('" + a + "')", 1E3); log(b.getClientID() + " subscribes to this topic '" + a + "'"); return !0 }, onUnsubscribe: function (a, b) { log(b.getClientID() + " unsubscribes from this topic '" + a + "'"); return !0 }, onPublish: function (a, b, d, e) { return OrngContainer.onPublish(a, b, d, e) } }); gadgets.pubsub2router.init({ hub: OrngContainer.managedHub }); OrngContainer.rpcRegister("orng_responder",
OrngContainer.callORNGResponder); OrngContainer.rpcRegister("requestNavigateTo", OrngContainer.doProfilesNavigation); OrngContainer.rpcRegister("set_title", OrngContainer.setTitleHandler); try { OrngContainer.inlineClient = new OpenAjax.hub.InlineContainer(OrngContainer.managedHub, "container", { Container: { onSecurityAlert: function (a, b) { }, onConnect: function (a) { }, onDisconnect: function (a) { } } }), OrngContainer.inlineClient.connect() } catch (b) {
        alert("ERROR creating or connecting InlineClient in OrngContainer.managedHub [" +
b.message + "]")
    } 
};
OrngContainer.onPublish = function (b, a, c, d) {
    log(c.getClientID() + " publishes '" + a + "' to topic '" + b + "' subscribed by " + d.getClientID()); c = {}; if ("status" == b) { if (b = document.getElementById(c + "_status")) a = message.split(":"), 2 == a.length ? (b.style.color = a[0], b.innerHTML = a[1]) : b.innerHTML = message } else "analytics" == b ? a.hasOwnProperty("value") ? _gaq.push(["_trackEvent", my.gadgets[moduleId].label, a.action, a.label, a.value]) : a.hasOwnProperty("label") ? _gaq.push(["_trackEvent", my.gadgets[moduleId].label, a.action, a.label]) :
_gaq.push(["_trackEvent", my.gadgets[moduleId].label, a.action]) : "profile" == b && (_gaq.push(["_trackEvent", my.gadgets[moduleId].label, "go_to_profile", a]), document.location.href = "/" + location.pathname.split("/")[1] + "/display/n" + a); return !0
}; OrngContainer.navigateView = function (b, a) { var c = a.opt_params; c[osapi.container.RenderParam.WIDTH] = "100%"; c[osapi.container.RenderParam.VIEW] = a.view; c[osapi.container.RenderParam.DEBUG] = my.debug; OrngContainer.navigateGadget(b, a.url, {}, c) };
OrngContainer.collapseGadget = function (b) { OrngContainer.closeGadget(b) }; OrngContainer.setTitleHandler = function (b, a) { }; OrngContainer.callORNGResponder = function (b, a, c) { $.ajax({ type: "POST", url: _rootDomain + "/ORNG/Default.aspx/CallORNGResponder", data: gadgets.json.stringify({ guid: my.guid, request: a }), contentType: "application/json; charset=utf-8", dataType: "json", async: !0, success: function (a) { b.callback(a.d) } }) };
OrngContainer.doProfilesNavigation = function (b, a, c) { var d = gadgets.config.get("views")[a].urlTemplate; a = d + window.location.search.substring(1); a = removeParameterFromURL(a, "appId"); 0 == d.indexOf("ORNG") && (b = my.gadgets[b.gs.getModuleId()].appId, a += "&appId=" + b); c && (c = gadgets.json.stringify(c), 0 < c.length && (a += "&appParams=" + encodeURIComponent(c))); a && -1 == document.location.href.indexOf(a) && (document.location.href = _rootDomain + "/" + a) };
window.buildGadget = function (b, a) {
    b = b || {}; var c = document.getElementById(a.chrome_id); if (c) {
        var d = document.createElement("div"); d.className = "gadgets-gadget-chrome"; var e = b[a.url].views && b[a.url].views[a.view] ? b[a.url].views[a.view].preferredWidth : 0; if (e = e || b[a.url].modulePrefs.width) d.style.width = e + "px"; c.appendChild(d); 1 != a.opt_params.hide_titlebar && (c = cleanTitle(b[a.url].modulePrefs.title), "canvas" != a.view ? d.innerHTML = this.getTitleHtml(a, c) : document.getElementById("gadgets-title").innerHTML = c); c =
document.createElement("div"); c.className = "gadgets-gadget-content"; d.appendChild(c); d = OrngContainer.newGadgetSite(c); OrngContainer.navigateView(d, a)
    } 
}; window.getTitleHtml = function (b, a) { return '<div id="gadgets-gadget-title-bar-' + b.appId + '" class="gadgets-gadget-title-bar"><span class="gadgets-gadget-title-button-bar"></span> <span id="' + b.appId + '_title" class="gadgets-gadget-title">' + a + '</span><span id="' + b.appId + '_status" class="gadgets-gadget-status"></span></div>' };
function log(b) { if (1 == my.debug) try { document.getElementById("gadgets-log").innerHTML = gadgets.util.escapeString(b) + "<br/>" + document.getElementById("gadgets-log").innerHTML } catch (a) { alert("ERROR in logging mechanism [" + a.message + "]") } } function cleanTitle(b) { return (b || "Gadget").replace(/&/g, "&amp;").replace(/</g, "&lt;") }
function removeParameterFromURL(b, a) { var c = b.split("?"); if (2 <= c.length) { for (var d = encodeURIComponent(a) + "=", e = c[1].split(/[&;]/g), f = e.length; 0 < f--; )-1 !== e[f].lastIndexOf(d, 0) && e.splice(f, 1); b = c[0] + "?" + e.join("&") } return b };